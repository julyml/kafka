version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.1.2
    depends_on:
      - zookeeper
    
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:5.1.2
  #   hostname: schema-registry
    
  #   ports:
  #     - 8081:8081
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # ksql-server:
  #   image: confluentinc/cp-ksql-server:5.1.2
  #   volumes:
  #       - ./sql:/opt/data/scripts/    
  #   depends_on:
  #     - kafka
  #     - schema-registry
  #   environment:
  #     KSQL_BOOTSTRAP_SERVERS: kafka:9092
  #     KSQL_LISTENERS: http://0.0.0.0:8088
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     KSQL_KSQL_SERVICE_ID: ksql-server

  airflow:
      image: ${REPO}
      container_name: airflow
      
      volumes:
        - ./dags:/opt/airflow/dags
        - ./sql:/opt/airflow/sql
        - ./tests:/opt/airflow/tests
        - ./data:/opt/airflow/data
        - ./requirements.txt:/opt/airflow/requirements.txt
      environment: 
        - AIRFLOW_HOME=/opt/airflow
        - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
        - AIRFLOW__CORE__EXECUTOR=${EXECUTOR}
        - AIRFLOW__CORE__LOAD_EXAMPLES=false
        - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=false
        - AIRFLOW__API__AUTH_BACKEND=${AIRFLOW_API_BACKEND}
      ports:
        - 8080:8080
      command: 'bash -c "pip3 install -r requirements.txt && airflow db init && airflow webserver -D && airflow scheduler -D"'